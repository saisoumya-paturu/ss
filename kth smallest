class Solution {
    public int kthSmallest(int[][] matrix, int k) {
         int n = matrix.length;
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0])); // Min-heap

        // Add the first element of each row into the heap
        for (int i = 0; i < n; i++) {
            pq.offer(new int[] { matrix[i][0], i, 0 });
        }

        int count = 0;
        while (count < k) {
            // Get the smallest element from the heap
            int[] curr = pq.poll();
            int val = curr[0];
            int row = curr[1];
            int col = curr[2];
            count++;

            if (count == k) {
                return val; // Found the kth smallest element
            }

            // If there's another element in the same row, add it to the heap
            if (col + 1 < n) {
                pq.offer(new int[] { matrix[row][col + 1], row, col + 1 });
            }
        }

        return -1;
    }
}
